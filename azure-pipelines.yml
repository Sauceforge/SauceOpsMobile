# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'windows-latest'
  demands:
  - msbuild
  - visualstudio
  - vstest

variables:
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'release'

steps:
- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.4.1'
  inputs:
    versionSpec: 4.4.1

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: '**\*.sln'

- task: VSBuild@1
  displayName: 'Build solution'
  inputs:
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'

- task: VSTest@2
  displayName: 'Unit Test'
  env:
    OPSENG_SAUCE_API_KEY: $(OPSENG_SAUCE_API_KEY)
    OPSENG_SAUCE_USER_NAME: $(OPSENG_SAUCE_USER_NAME)
  inputs:
    testAssemblyVer2: |
     **\$(BuildConfiguration)\UnitTests.dll
     !**\obj\**
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'

- task: PowerShell@2
  displayName: 'Run Functional Tests'
  env:
    OPSENG_SAUCE_API_KEY: $(OPSENG_SAUCE_API_KEY)
    OPSENG_SAUCE_USER_NAME: $(OPSENG_SAUCE_USER_NAME)
  inputs:
    filePath: 'runTests.ps1'

#- task: VSTest@2
#  displayName: 'Functional Test'
#  env:
#    OPSENG_SAUCE_API_KEY: $(OPSENG_SAUCE_API_KEY)
#    OPSENG_SAUCE_USER_NAME: $(OPSENG_SAUCE_USER_NAME)
#  inputs:
#    testAssemblyVer2: |
#     **\$(BuildConfiguration)\SauceOps.dll
#     !**\obj\**
#    platform: '$(BuildPlatform)'
#    configuration: '$(BuildConfiguration)'
